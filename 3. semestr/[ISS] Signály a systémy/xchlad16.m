%Author: Martin Chladek <xchlad16@stud.fit.vutbr.cz>% Pr. 1: Nactete Vas osobni signal ze souboru xlogin00.wav,% kde xlogin00 je Vas login. Napiste vzorkovaci frekvenci signalu,% jeho delku ve vzorcich a v sekundach a pocet reprezentovanych binarnich symbolu% (1 symbol odpovida 16ti vzorkum). Tento signal budu oznacovat jako s[n].%-------------------------------------------------------------------------------fprintf('\n1. priklad\n');[input_signal, fs] = audioread('xchlad16.wav');input_signal = input_signal';signal_sample_lenght = length(input_signal);fprintf('Vzorkovaci frekvence signalu: %f [Hz].\n', fs);fprintf('Delka signalu ve vzorcich: %f\n', signal_sample_lenght);fnorm = signal_sample_lenght/fs;fprintf('Delka signalu v sekundach: %f [s].\n', fnorm);%Pr. 2: Dekodovani do binarnich symbolu.%-------------------------------------------------------------------------------fprintf('\n2. priklad\n');decode_signal = input_signal(8:16:32000);n =  1;do  if(decode_signal(n) > 0)    decode_signal(n) = 1;   else    decode_signal(n) = 0;    endif   n++;until (n == (length(decode_signal)+1))time = 0.02; %2Omsnumber_of_samples = (time/fnorm) * signal_sample_lenght;x = 0:0.0000625:0.020; %time/number_of_samples = 0.0000625fig = figure('Visible', 'off');stem(0.0005:0.001:0.02, decode_signal(1:20));hold onplot(x, input_signal(1:321));xlabel("t");ylabel("s[n], symboly");print -depsc pr2.eps; % barevne EPShold offclose(fig);%Pr. 3 Filtr s prenosovou funkci%-------------------------------------------------------------------------------fprintf('\n3. priklad\n'); B = [0.0192   -0.0185   -0.0185    0.0192]; A = [1.0000   -2.8870    2.7997   -0.9113];rootsB = roots(B);rootsA = roots(A);if abs(rootsA) < 1	fprintf('Filtr je stabilni.\n');else	fprintf('Filtr neni stabilni.\n');endfig = figure('Visible', 'off');hold ontitle('Zobrazeni nul a polu v jednotkove kruznici');xlabel("Realna cast");ylabel("Imaginarni cast");zplane(rootsB,rootsA);print -depsc pr3.eps;hold offclose(fig);%Pr. 4 Modul kmitoctove charakteristiky%-------------------------------------------------------------------------------fprintf('\n4. priklad\n');H = freqz(B,A,256); f = (1:256) / 256 * fs / 2; short_H = H(1:65);[value, corner_freq] = min(abs(short_H));corner_freq = corner_freq * (8000/256);fprintf('Mezní frekvence je %f [Hz]\n', corner_freq);fig = figure('Visible', 'off');stem (corner_freq, value);hold onplot (f,abs(H));grid off; xlabel('f'); ylabel('|H(f)|');print -depsc pr4.eps;hold offclose(fig);%Pr. 5 Filtrovat filtrem%-------------------------------------------------------------------------------fprintf('\n5. priklad\n');filtered_signal = filter(B,A,input_signal);fig = figure('Visible', 'off');hold ongrid on;plot(x, input_signal(1:321));plot(x, filtered_signal(1:321));xlabel('t');ylabel('s[n],ss[n],symboly');print -depsc pr5.eps;hold offclose(fig);%Pr. 6 Posunout signál a dekódovat%-------------------------------------------------------------------------------fprintf('\n6. priklad\n');filtered_shift_signal = circshift(filtered_signal, [0 -16]); %posunuti o 16 vzorkudecode_filtered_shift_signal = filtered_shift_signal(8:16:32000);n =  1;do  if(decode_filtered_shift_signal(n) > 0)    decode_filtered_shift_signal(n) = 1;   else    decode_filtered_shift_signal(n) = 0;    endif   n++;until (n == (length(decode_signal)+1))fig = figure('Visible', 'off');stem(0.0005:0.001:0.02, decode_filtered_shift_signal(1:20));hold ongrid off;plot(x, input_signal(1:321));plot(x, filtered_signal(1:321));plot(x, filtered_shift_signal(1:321));legend('dekodovany filtr. posun. signal','vstupni signal','filtrovany signal', 'filtrovany posunuty signal');xlabel('t');ylabel('s[n],ss[n],ss_s_h_i_f_t_e_d[n],symboly');print -depsc pr6.eps;hold offclose(fig);%Pr. 7 Porovnat dekodovany a dekodovany posunuty signal%-------------------------------------------------------------------------------fprintf('\n7. priklad\n');n =  1;faults = 0;do  if(xor(decode_filtered_shift_signal(n), decode_signal(n)) == 1)    faults++;  endif   n++;until (n == (length(decode_signal)+1))fprintf('Pocet odlisnych bitu: %d\n',faults);fprintf('Chybovost je: %d %%\n',( (faults/length(decode_signal) ) *100) );%Pr. 8 Vypocitat spektra pomoci DFT%-------------------------------------------------------------------------------fprintf('\n8. priklad\n');frekvence = (0 : signal_sample_lenght/ 2 - 1) / signal_sample_lenght * fs;fig = figure('Visible', 'off');dft_signal = abs(fft(input_signal));dft_signal = dft_signal(1 : signal_sample_lenght/2);dft_filtered_signal = abs(fft(filtered_signal));dft_filtered_signal = dft_filtered_signal(1 : signal_sample_lenght/2);plot(frekvence, dft_signal);hold onplot(frekvence, dft_filtered_signal);xlabel('f[Hz]');title('DFT puvodniho a filtrovaneho signalu');print -depsc pr8.eps;hold off;close(fig);%Pr. 9 Odhadnuti funkce rozdeleni pravdepodobnosti%-------------------------------------------------------------------------------fprintf('\n9. priklad\n');Omega = 32000;kolik = 50;xmin = min(min(input_signal)); xmax = max(max(input_signal));pocet = 50;x = linspace(xmin,xmax,pocet);Fxn = zeros(size(x));for i=1:kolik,  thisx = x(i);  Fxn(i) = sum(input_signal < thisx) / Omega;enddeltax = x(2) - x(1);pxn = hist(input_signal,x) / Omega / deltax;fig = figure('Visible', 'off');plot (x, pxn);title('Odhad funkce rozdeleni pravdepodobnosti');print -depsc pr9.eps;close(fig);%Overeni pdf_check = sum(pxn * deltax);fprintf('Overeni odhadu funkce rozdeleni pravdepodobnosti:  %f\n', pdf_check);%Pr. 10 Korelacni koeficienty%-------------------------------------------------------------------------------fprintf('\n10. priklad\n');k = (-50:50);R = xcorr(input_signal, input_signal)/signal_sample_lenght;R = R(k + signal_sample_lenght);fig = figure('Visible', 'off');plot (k, R);title('Obrazek korelacnich koeficientu');print -depsc pr10.eps;close(fig);%Pr. 11 Hodnoty korelacnich koeficientu%-------------------------------------------------------------------------------fprintf('\n11. priklad\n');fprintf('Hodnota R[0] = %f\nHodnota R[1] = %f\nHodnota R[16] = %f\n', R(51), R(52), R(67));%Pr. 12 Casovy odhad sdruzene funkce hustoty rozdeleni%-------------------------------------------------------------------------------fprintf('\n12. priklad\n');N = length(input_signal);L = 100;x = linspace(min(input_signal), max(input_signal), 100);h = zeros(L, L);[~, ind1] = min(abs(repmat(input_signal(:)', L, 1) - repmat(x(:), 1, N)));ind2 = ind1(1 + 1 : N);for i = 1 : N - 1,    d1 = ind1(i);    d2 = ind2(i);    h(d1, d2) = h(d1, d2) + 1;endsurf = (x(2) - x(1)) ^ 2;p = h / N / surf;fig = figure('Visible', 'off');imagesc(x, x, p);axis xy;colorbar;xlabel('x2');ylabel('x1');print -depsc pr12.eps;close(fig);%Pr. 13 Overit spravnost hustoty%-------------------------------------------------------------------------------fprintf('\n13. priklad\n');func_check = sum(sum(p)) * surf;fprintf('Overeni, ze se jedna o spravnou funkci - vysledek: %f.\n', func_check);%Pr. 14 Korelacni koeficient R[1] z hustoty rozdeleni pravdepodobnosti%-------------------------------------------------------------------------------fprintf('\n14. priklad\n');R1 = sum(sum(repmat(x(:), 1, L) .* repmat(x(:)', L, 1) .* p)) * surf;fprintf('Koeficient R[1] ma hodnotu %f.\n', R1);